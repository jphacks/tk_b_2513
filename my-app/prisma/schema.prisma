// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * users テーブル
 */
model User {
  id           String   @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  username     String   @unique
  email        String   @unique
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  // リレーション
  images Image[]

  @@map("users")
}

/**
 * images テーブル
 * embedding_vector は pgvector 型なので Prisma では Unsupported として扱う
 * 実際の読み書き・検索は $executeRaw / $queryRaw を使う
 */
model Image {
  id         String   @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  userId     String?  @db.Uuid @map("user_id")
  prompt     String
  imageUrl   String   @map("image_url")
  createdAt  DateTime @default(now()) @map("created_at")

  // Prisma では直接扱わないベクトル列（RAWで更新/検索）
  embedding  Unsupported("vector")? @map("embedding_vector")

  // リレーション
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("images")
}

